(()=>{var __webpack_modules__={837:t=>{const generateMutationQuery=(t,e,n,o,r)=>{const s=t.repository?.projects?.nodes?.columns?.id||t.repository?.owner?.projects?.nodes?.columns?.id;if(t.repository.projects){t.repository.projects.nodes=t.repository.projects.nodes.map((t=>{t.name=t.name;t.id=t.id;t.columns=t.columns.options;return t}))}if(t.repository.owner&&t.repository.owner.projects){t.repository.owner.projects.nodes=t.repository.owner.projects.nodes.map((t=>{t.name=t.name;t.id=t.id;t.columns=t.columns.options;return t}))}const i=t.repository.projects.nodes||[];const c=t.repository.owner&&t.repository.owner.projects&&t.repository.owner.projects.nodes||[];const d=[...i,...c].filter((t=>t.name===e)).flatMap((t=>t)).filter((t=>{const e=t.columns.nodes.filter((t=>t.name===n));return e.length>0}));if(d.length===0){throw new Error(`Could not find the column "${n}" or project "${e}"`)}const a={};for(const t of d){a[t.id]={columnId:t.columns.nodes.filter((t=>t.name===n)).map((t=>t.id))[0]}}const u=t.projectCards.nodes.filter((t=>t.project.name===e));for(const t of u){a[t.project.id].cardId=t.id;a[t.project.id].isArchived=t.isArchived}const l=Object.keys(a).map((t=>{if(r==="update"){return a[t].cardId?`mutation {\n\t\t\tupdateProjectV2ItemFieldValue( input: {\n\t\t\t\tprojectId: "${t}",\n\t\t\t\titemId: "${a[t].cardId}",\n\t\t\t\tfieldId: "${s}",\n\t\t\t\tvalues: {\n\t\t\t\t\tsingleSelectOptionId: "${a[t].columnId}"\n\t\t\t\t}\n\t\t\t}) { \n\t\t\t\tprojectV2Item {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t} \n\t\t}`:`mutation {\n\t\t\taddProjectV2ItemById( input: {\n\t\t\t\tprojectId: "${t}",\n\t\t\t\tcontentId: "${o}"\n\t\t\t}) { \n\t\t\t\titem {\n\t\t\t\t\tid\n\t\t\t\t  }\n\t\t\t} \n\t\t}`}if(r==="delete"&&a[t].cardId){return`mutation {\n\t\t\tdeleteProjectV2Item( input: {\n\t\t\t\tprojectId: "${t}",\n\t\t\t\tcardId: "${a[t].cardId}"\n\t\t\t}) { \n\t\t\t\tdeletedItemId\n\t\t\t} \n\t\t}`}if(r==="archive"&&!a[t].isArchived){return`mutation {\n\t\t\t\t\t\tupdateProjectCard(input: { \n\t\t\t\t\t\t\tprojectCardId: "${a[t].cardId}", \n\t\t\t\t\t\t\tisArchived: true \n\t\t\t\t\t}) { clientMutationId } }`}if(r==="add"&&!a[t].cardId){return`mutation {\n\t\t\t\t\taddProjectCard( input: {\n\t\t\t\t\t\tcontentId: "${o}",\n\t\t\t\t\t\tprojectColumnId: "${a[t].columnId}"\n\t\t\t\t}) { clientMutationId } }`}return undefined}));return l.filter((t=>t!==undefined))};t.exports=generateMutationQuery},608:t=>{const projectQuery=(t,e,n)=>`query {\n\t\tresource( url: "${t}" ) {\n\t\t\t... on ${e.startsWith("issue")?"Issue":"PullRequest"} {\n\t\t\tprojectCards: projectItems(first: 100) {\n\t\t\t  nodes {\n\t\t\t\tid\n\t\t\t\tisArchived\n\t\t\t\tproject {\n\t\t\t\t  name: title\n\t\t\t\t  id\n\t\t\t\t}\n\t\t\t  }\n\t\t\t}\n\t\t\trepository {\n\t\t\t  projects: projectsV2(query: "title: ${n}", first: 10) {\n\t\t\t\tnodes {\n\t\t\t\t  name: title\n\t\t\t\t  id\n\t\t\t\t  columns: field(name: "Status") {\n\t\t\t\t\t... on ProjectV2SingleSelectField {\n\t\t\t\t\t  options {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  }\n\t\t\t  owner {\n\t\t\t\t... on ProjectV2Owner {\n\t\t\t\t  projects: projectsV2(query: "title: ${n}", first: 10) {\n\t\t\t\t\tnodes {\n\t\t\t\t\t  name: title\n\t\t\t\t\t  id\n\t\t\t\t\t  columns: field(name: "Status") {\n\t\t\t\t\t\t... on ProjectV2SingleSelectField {\n\t\t\t\t\t\t  options {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t}\n\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  }\n\t\t\t}\n\t\t  }\n\t\t}\n\t  }`;t.exports=projectQuery},339:t=>{const e=new Set(["pull_request","pull_request_target","pull_request_review","issues","issue_comment"]);const getActionData=t=>{const{eventName:n,payload:o}=t;if(!e.has(n)){throw new Error(`Only pull requests, reviews, issues, or comments allowed. Received:\n${n}`)}const r=n==="issues"||n==="issue_comment"?o.issue:o.pull_request;return{eventName:n,action:o.action,nodeId:r.node_id,url:r.html_url}};t.exports=getActionData},264:module=>{module.exports=eval("require")("@actions/core")},337:module=>{module.exports=eval("require")("@actions/github")}};var __webpack_module_cache__={};function __nccwpck_require__(t){var e=__webpack_module_cache__[t];if(e!==undefined){return e.exports}var n=__webpack_module_cache__[t]={exports:{}};var o=true;try{__webpack_modules__[t](n,n.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[t]}return n.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const t=__nccwpck_require__(264);const e=__nccwpck_require__(337);const n=__nccwpck_require__(339);const o=__nccwpck_require__(608);const r=__nccwpck_require__(837);(async()=>{try{const s=t.getInput("repo-token");const i=t.getInput("project");const c=t.getInput("column");const d=t.getInput("action")||"update";const{eventName:a,nodeId:u,url:l}=n(e.context);const p=new e.GitHub(s);const _=o(l,a,i);t.debug(_);const{resource:m}=await p.graphql(_);t.debug(JSON.stringify(m));const j=r(m,i,c,u,d);if((d==="delete"||d==="archive"||d==="add")&&j.length===0){console.log("✅ There is nothing to do with card");return}t.debug(j.join("\n"));await Promise.all(j.map((t=>p.graphql(t))));if(j.length>1){console.log(`✅ Card materialised into to ${c} in ${j.length} projects called ${i}`)}else{console.log(`✅ Card materialised into ${c} in ${i}`)}}catch(e){t.setFailed(e.message)}})()})();module.exports=__webpack_exports__})();